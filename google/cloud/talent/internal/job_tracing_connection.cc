// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/talent/v4/job_service.proto

#include "google/cloud/talent/internal/job_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace talent_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

class JobServiceTracingConnection : public talent::JobServiceConnection {
 public:
  ~JobServiceTracingConnection() override = default;

  explicit JobServiceTracingConnection(
      std::shared_ptr<talent::JobServiceConnection> child)
      : child_(std::move(child)) {}

  Options options() override { return child_->options(); }

  StatusOr<google::cloud::talent::v4::Job> CreateJob(
      google::cloud::talent::v4::CreateJobRequest const& request) override {
    return child_->CreateJob(request);
  }

  future<StatusOr<google::cloud::talent::v4::BatchCreateJobsResponse>>
  BatchCreateJobs(google::cloud::talent::v4::BatchCreateJobsRequest const&
                      request) override {
    auto span = internal::MakeSpan("JobServiceClient::BatchCreateJobsRequest");
    auto scope = opentelemetry::trace::Scope(span);
    return internal::CaptureReturn(span, child_->BatchCreateJobs(request));
  }

  StatusOr<google::cloud::talent::v4::Job> GetJob(
      google::cloud::talent::v4::GetJobRequest const& request) override {
    return child_->GetJob(request);
  }

  StatusOr<google::cloud::talent::v4::Job> UpdateJob(
      google::cloud::talent::v4::UpdateJobRequest const& request) override {
    return child_->UpdateJob(request);
  }

  future<StatusOr<google::cloud::talent::v4::BatchUpdateJobsResponse>>
  BatchUpdateJobs(google::cloud::talent::v4::BatchUpdateJobsRequest const&
                      request) override {
    return child_->BatchUpdateJobs(request);
  }

  Status DeleteJob(
      google::cloud::talent::v4::DeleteJobRequest const& request) override {
    return child_->DeleteJob(request);
  }

  future<StatusOr<google::cloud::talent::v4::BatchDeleteJobsResponse>>
  BatchDeleteJobs(google::cloud::talent::v4::BatchDeleteJobsRequest const&
                      request) override {
    return child_->BatchDeleteJobs(request);
  }

  StreamRange<google::cloud::talent::v4::Job> ListJobs(
      google::cloud::talent::v4::ListJobsRequest request) override {
    return child_->ListJobs(request);
  }

  StatusOr<google::cloud::talent::v4::SearchJobsResponse> SearchJobs(
      google::cloud::talent::v4::SearchJobsRequest const& request) override {
    return child_->SearchJobs(request);
  }

  StatusOr<google::cloud::talent::v4::SearchJobsResponse> SearchJobsForAlert(
      google::cloud::talent::v4::SearchJobsRequest const& request) override {
    return child_->SearchJobsForAlert(request);
  }

 private:
  std::shared_ptr<talent::JobServiceConnection> child_;
};

std::shared_ptr<talent::JobServiceConnection> MakeJobServiceTracingConnection(
    std::shared_ptr<talent::JobServiceConnection> child) {
  return std::make_shared<JobServiceTracingConnection>(std::move(child));
}

#else

std::shared_ptr<talent::JobServiceConnection> MakeJobServiceTracingConnection(
    std::shared_ptr<talent::JobServiceConnection> child) {
  return child;
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent_internal
}  // namespace cloud
}  // namespace google
