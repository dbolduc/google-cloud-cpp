// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/talent/v4/company_service.proto

#include "google/cloud/talent/internal/company_tracing_connection.h"
#include "google/cloud/internal/open_telemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace talent_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPEN_TELEMETRY

class CompanyServiceTracingConnection
    : public talent::CompanyServiceConnection {
 public:
  ~CompanyServiceTracingConnection() override = default;

  explicit CompanyServiceTracingConnection(
      std::shared_ptr<talent::CompanyServiceConnection> child)
      : child_(std::move(child)) {}

  Options options() override { return child_->options(); }

  StatusOr<google::cloud::talent::v4::Company> CreateCompany(
      google::cloud::talent::v4::CreateCompanyRequest const& request) override {
    return child_->CreateCompany(request);
  }

  StatusOr<google::cloud::talent::v4::Company> GetCompany(
      google::cloud::talent::v4::GetCompanyRequest const& request) override {
    auto span = internal::MakeSpan("CompanyServiceClient::GetCompany");
    auto scope = internal::GetTracer()->WithActiveSpan(span);
    return internal::CaptureReturn(span, child_->GetCompany(request), false);
  }

  future<StatusOr<google::cloud::talent::v4::Company>> AsyncGetCompany(
      google::cloud::talent::v4::GetCompanyRequest const& request) override {
    auto span = internal::MakeSpan("CompanyServiceClient::AsyncGetCompany");
    auto scope = internal::GetTracer()->WithActiveSpan(span);
    return internal::CaptureReturn(span, child_->AsyncGetCompany(request),
                                   true);
  }

  StatusOr<google::cloud::talent::v4::Company> UpdateCompany(
      google::cloud::talent::v4::UpdateCompanyRequest const& request) override {
    return child_->UpdateCompany(request);
  }

  Status DeleteCompany(
      google::cloud::talent::v4::DeleteCompanyRequest const& request) override {
    return child_->DeleteCompany(request);
  }

  StreamRange<google::cloud::talent::v4::Company> ListCompanies(
      google::cloud::talent::v4::ListCompaniesRequest request) override {
    return child_->ListCompanies(std::move(request));
  }

 private:
  std::shared_ptr<talent::CompanyServiceConnection> child_;
};

std::shared_ptr<talent::CompanyServiceConnection>
MakeCompanyServiceTracingConnection(
    std::shared_ptr<talent::CompanyServiceConnection> child) {
  return std::make_shared<CompanyServiceTracingConnection>(std::move(child));
}

#else

std::shared_ptr<talent::CompanyServiceConnection>
MakeCompanyServiceTracingConnection(
    std::shared_ptr<talent::CompanyServiceConnection> child) {
  return child;
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPEN_TELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent_internal
}  // namespace cloud
}  // namespace google
