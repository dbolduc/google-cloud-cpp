// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/talent/v4/job_service.proto

#include "google/cloud/talent/internal/job_tracing_stub.h"
#include "google/cloud/internal/grpc_open_telemetry.h"
#include <memory>

namespace google {
namespace cloud {
namespace talent_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPEN_TELEMETRY

class JobServiceTracingStub : public JobServiceStub {
 public:
  ~JobServiceTracingStub() override = default;

  explicit JobServiceTracingStub(std::shared_ptr<JobServiceStub> child)
      : child_(std::move(child)) {}

  StatusOr<google::cloud::talent::v4::Job> CreateJob(
      grpc::ClientContext& context,
      google::cloud::talent::v4::CreateJobRequest const& request) override {
    return child_->CreateJob(context, request);
  }

  future<StatusOr<google::longrunning::Operation>> AsyncBatchCreateJobs(
      google::cloud::CompletionQueue& cq,
      std::unique_ptr<grpc::ClientContext> context,
      google::cloud::talent::v4::BatchCreateJobsRequest const& request)
      override {
    auto& ctx_ref = *context;
    auto span =
        internal::MakeSpan(ctx_ref, "JobServiceStub::AsyncBatchCreateJobs");
    // auto scope = internal::GetTracer()->WithActiveSpan(span);
    internal::InjectSpanContext(ctx_ref);
    return internal::CaptureReturn(
        ctx_ref, span,
        child_->AsyncBatchCreateJobs(cq, std::move(context), request), true);
  }

  StatusOr<google::cloud::talent::v4::Job> GetJob(
      grpc::ClientContext& context,
      google::cloud::talent::v4::GetJobRequest const& request) override {
    return child_->GetJob(context, request);
  }

  StatusOr<google::cloud::talent::v4::Job> UpdateJob(
      grpc::ClientContext& context,
      google::cloud::talent::v4::UpdateJobRequest const& request) override {
    return child_->UpdateJob(context, request);
  }

  future<StatusOr<google::longrunning::Operation>> AsyncBatchUpdateJobs(
      google::cloud::CompletionQueue& cq,
      std::unique_ptr<grpc::ClientContext> context,
      google::cloud::talent::v4::BatchUpdateJobsRequest const& request)
      override {
    return child_->AsyncBatchUpdateJobs(cq, std::move(context), request);
  }

  Status DeleteJob(
      grpc::ClientContext& context,
      google::cloud::talent::v4::DeleteJobRequest const& request) override {
    return child_->DeleteJob(context, request);
  }

  future<StatusOr<google::longrunning::Operation>> AsyncBatchDeleteJobs(
      google::cloud::CompletionQueue& cq,
      std::unique_ptr<grpc::ClientContext> context,
      google::cloud::talent::v4::BatchDeleteJobsRequest const& request)
      override {
    return child_->AsyncBatchDeleteJobs(cq, std::move(context), request);
  }

  StatusOr<google::cloud::talent::v4::ListJobsResponse> ListJobs(
      grpc::ClientContext& context,
      google::cloud::talent::v4::ListJobsRequest const& request) override {
    return child_->ListJobs(context, request);
  }

  StatusOr<google::cloud::talent::v4::SearchJobsResponse> SearchJobs(
      grpc::ClientContext& context,
      google::cloud::talent::v4::SearchJobsRequest const& request) override {
    return child_->SearchJobs(context, request);
  }

  StatusOr<google::cloud::talent::v4::SearchJobsResponse> SearchJobsForAlert(
      grpc::ClientContext& context,
      google::cloud::talent::v4::SearchJobsRequest const& request) override {
    return child_->SearchJobsForAlert(context, request);
  }

  future<StatusOr<google::longrunning::Operation>> AsyncGetOperation(
      google::cloud::CompletionQueue& cq,
      std::unique_ptr<grpc::ClientContext> context,
      google::longrunning::GetOperationRequest const& request) override {
    auto& ctx_ref = *context;
    auto span =
        internal::MakeSpan(ctx_ref, "JobServiceStub::AsyncGetOperation");
    // auto scope = internal::GetTracer()->WithActiveSpan(span);
    internal::InjectSpanContext(ctx_ref);
    return internal::CaptureReturn(
        ctx_ref, span,
        child_->AsyncGetOperation(cq, std::move(context), request), true);
  }

  future<Status> AsyncCancelOperation(
      google::cloud::CompletionQueue& cq,
      std::unique_ptr<grpc::ClientContext> context,
      google::longrunning::CancelOperationRequest const& request) override {
    auto& ctx_ref = *context;
    auto span =
        internal::MakeSpan(ctx_ref, "JobServiceStub::AsyncCancelOperation");
    // auto scope = internal::GetTracer()->WithActiveSpan(span);
    internal::InjectSpanContext(ctx_ref);
    return internal::CaptureReturn(
        ctx_ref, span,
        child_->AsyncCancelOperation(cq, std::move(context), request), true);
  }

 private:
  std::shared_ptr<JobServiceStub> child_;
};

std::shared_ptr<JobServiceStub> MakeJobServiceTracingStub(
    std::shared_ptr<JobServiceStub> child) {
  return std::make_shared<JobServiceTracingStub>(std::move(child));
}

#else

std::shared_ptr<JobServiceStub> MakeJobServiceTracingStub(
    std::shared_ptr<JobServiceStub> child) {
  return child;
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPEN_TELEMETRY

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace talent_internal
}  // namespace cloud
}  // namespace google
